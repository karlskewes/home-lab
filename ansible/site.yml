---
# TODO(kskewes): Split into multiple files/roles

# Python 3 is probably already installed and we can specify 'ansible_python_interpreter: /usr/bin/python3' in inventory
# Uncomment below if using python 2 for some reason
# - name: Install Python if not already installed.
#   hosts: all
#   tags: python
#   gather_facts: false
#   tasks:
#   - name: Install Python 2.x
#     raw: test -e /usr/bin/python || (apt update && apt install -y python python-simplejson)
#     register: test
#     changed_when: test.stdout

- name: Base configuration of hosts
  hosts: all:!edgeos
  become: yes
  tasks:
  - name: Setup users
    user:
      name: karl
      comment: Karl
      groups:
      - sudo
      # - docker  ## Only possible once installed
      append: yes
      shell: /bin/bash
      state: present
  - name: Add authorized keys
    authorized_key:
      user: karl
      key: "{{ lookup('file', '/home/karl/.ssh/id_rsa.pub') }}"
      state: present
  - name: Only run "update_cache=yes" if the last one '>3600' seconds ago
    apt:
      update_cache: yes
      cache_valid_time: 3600
  - name: Update all packages to the latest version
    apt:
      upgrade: dist
  - name: Remove dependencies that are no longer required
    apt:
      autoremove: yes
  - name: Remove old packages from the cache
    apt:
      autoclean: yes
  - name: Install packages
    apt:
      name: "{{ install_packages }}"
      state: present
  - name: Remove packages
    apt:
      name: "{{ remove_packages }}"
      state: absent
  - name: Allow passwordless sudo
    lineinfile:
      path: /etc/sudoers
      state: present
      regexp: "^%sudo ALL"
      line: "%sudo ALL=(ALL) NOPASSWD: ALL"
      validate: visudo -cf %s
  - name: "Set timezone to {{ timezone }}"
    timezone:
      name: "{{ timezone }}"
  - name: Set hostname
    hostname: name={{ inventory_hostname }}
    when: not inventory_hostname is match('(\d{1,3}\.){3}\d{1,3}')
  - name: Ensure kernel modules load on boot
    copy:
      dest: /etc/modules-load.d/ipip.conf
      content: |
        ipip
    notify: reboot_required
  handlers:
  - name: Reboot the server and wait for it to come back up.
    become: yes
    reboot:
      msg: Rebooting on change in kernel/zram/module change
    listen: reboot_required

- name: Rock64 tasks
  hosts: rock64
  become: yes
  tags: rock64
  tasks:
  - name: Install kernel
    apt:
      name: "{{ install_kernel }}"
      state: present
    notify: reboot_required
    register: install_kernel
  - name: Remove kernel
    apt:
      name: "{{ remove_kernel }}"
      state: absent
    notify: reboot_required
  - name: Update extlinux
    command: update-extlinux.sh rootfs
    ignore_errors: True
    when:
    - install_kernel is changed
    # notify: reboot_required  # Uncomment if/when add changed_when: logic
    # This command requires confirmation
    # - name: Upgrade bootloader
    #   command: rock64_upgrade_bootloader.sh
    #   ignore_errors: True
    # This command requires confirmation
    # - name: Upgrade SPI bootloard
    #   command: rock64_write_spi_flash.sh
    #   ignore_errors: True
  - name: Disable zram-config service
    service:
      name: zram-config
      enabled: no
      state: stopped
    notify: reboot_required
  # When creating multiple host OS's from a single OS image, the machine-id will be identical.
  # This prevents Kubernetes, Weave CNI and other appplications from differentiating machines/nodes.
  - name: Verify if machine id has been rotated before
    stat:
      path: /etc/machine-id.rotated
    register: stat_result
  - name: Generate unique machine id
    shell: "cat /proc/sys/kernel/random/uuid > /etc/machine-id"
    when: stat_result.stat.exists == False
  - name: Generate rotated file
    file:
      path: /etc/machine-id.rotated
      state: touch
    when: stat_result.stat.exists == False
  - name: Ensure hostname in /etc/hosts
    lineinfile:
      path: /etc/hosts
      regexp: '^(127.0.1.1)\s*(rock64)$'
      line: "127.0.1.1 {{ inventory_hostname }}"
      backrefs: yes
      owner: root
      group: root
      mode: 0644
  handlers:
  - name: Reboot the server and wait for it to come back up.
    become: yes
    reboot:
      msg: Rebooting on change in kernel/zram/module change
    listen: reboot_required
