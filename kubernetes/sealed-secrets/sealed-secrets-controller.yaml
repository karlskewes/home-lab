---
apiVersion: v1
kind: Namespace
metadata:
  name: sealed-secrets
  labels:
    app.kubernetes.io/name: sealed-secrets-controller
    name: sealed-secrets
---
# Default deny all ingress & egress policy, except allow kube-dns
# All traffic except this must be explicity allowed.
kind: NetworkPolicy
apiVersion: networking.k8s.io/v1
metadata:
  name: default-deny-all-except-kube-dns
  namespace: sealed-secrets
  labels:
    app.kubernetes.io/name: sealed-secrets-controller
spec:
  podSelector: {}
  egress:
  - to:
    - podSelector:
        matchLabels:
          k8s-app: kube-dns
  - ports:
    - protocol: TCP
      port: 53
    - protocol: UDP
      port: 53
  policyTypes:
  - Ingress
  - Egress
---
apiVersion: apiextensions.k8s.io/v1beta1
kind: CustomResourceDefinition
metadata:
  name: sealedsecrets.bitnami.com
spec:
  group: bitnami.com
  names:
    kind: SealedSecret
    listKind: SealedSecretList
    plural: sealedsecrets
    singular: sealedsecret
  scope: Namespaced
  subresources:
    status: {}
  version: v1alpha1
---
apiVersion: v1
kind: ServiceAccount
metadata:
  name: sealed-secrets-controller
  namespace: sealed-secrets
  labels:
    app.kubernetes.io/name: sealed-secrets-controller
---
apiVersion: rbac.authorization.k8s.io/v1beta1
kind: ClusterRole
metadata:
  name: secrets-unsealer
  labels:
    app.kubernetes.io/name: sealed-secrets-controller
rules:
- apiGroups: ["bitnami.com"]
  resources: ["sealedsecrets"]
  verbs: ["get", "list", "watch"]
- apiGroups: ["bitnami.com"]
  resources: ["sealedsecrets/status"]
  verbs: ["update"]
- apiGroups: [""]
  resources: ["secrets"]
  verbs: ["get", "create", "update", "delete"]
- apiGroups: [""]
  resources: ["events"]
  verbs: ["create", "patch"]
---
apiVersion: rbac.authorization.k8s.io/v1beta1
kind: ClusterRoleBinding
metadata:
  name: sealed-secrets-controller
  labels:
    app.kubernetes.io/name: sealed-secrets-controller
roleRef:
  apiGroup: rbac.authorization.k8s.io
  kind: ClusterRole
  name: secrets-unsealer
subjects:
- apiGroup: ""
  kind: ServiceAccount
  name: sealed-secrets-controller
  namespace: sealed-secrets
---
apiVersion: rbac.authorization.k8s.io/v1beta1
kind: Role
metadata:
  name: sealed-secrets-key-admin
  namespace: sealed-secrets
  labels:
    app.kubernetes.io/name: sealed-secrets-controller
rules:
- apiGroups: [""]
  resources: ["secrets"]
  verbs: ["create", "list"]
---
apiVersion: rbac.authorization.k8s.io/v1beta1
kind: RoleBinding
metadata:
  name: sealed-secrets-controller
  namespace: sealed-secrets
  labels:
    app.kubernetes.io/name: sealed-secrets-controller
roleRef:
  apiGroup: rbac.authorization.k8s.io
  kind: Role
  name: sealed-secrets-key-admin
subjects:
- apiGroup: ""
  kind: ServiceAccount
  name: sealed-secrets-controller
  namespace: sealed-secrets
---
apiVersion: apps/v1
kind: Deployment
metadata:
  name: sealed-secrets-controller
  namespace: sealed-secrets
  labels:
    app.kubernetes.io/name: sealed-secrets-controller
spec:
  replicas: 1
  selector:
    matchLabels:
      app.kubernetes.io/name: sealed-secrets-controller
  template:
    metadata:
      labels:
        app.kubernetes.io/name: sealed-secrets-controller
    spec:
      containers:
      - name: sealed-secrets-controller
        image: quay.io/bitnami/sealed-secrets-controller:v0.12.5
        command:
        - controller
        livenessProbe:
          httpGet:
            path: /healthz
            port: 8080
        ports:
        - containerPort: 8080
          name: http
        readinessProbe:
          httpGet:
            path: /healthz
            port: 8080
        resources:
          limits:
            cpu: 100m
            memory: 100Mi
          requests:
            cpu: 100m
            memory: 100Mi
        securityContext:
          readOnlyRootFilesystem: true
          runAsNonRoot: true
          runAsGroup: 10002
          runAsUser: 10002
      serviceAccountName: sealed-secrets-controller
---
apiVersion: monitoring.coreos.com/v1
kind: PodMonitor
metadata:
  name: sealed-secrets-controller
  namespace: sealed-secrets
  labels:
    app.kubernetes.io/name: sealed-secrets-controller
    team: home
spec:
  selector:
    matchLabels:
      app.kubernetes.io/name: sealed-secrets-controller
  podMetricsEndpoints:
  - port: http
    path: /metrics
  sampleLimit: 1000
---
kind: NetworkPolicy
apiVersion: networking.k8s.io/v1
metadata:
  name: sealed-secrets-controller
  namespace: sealed-secrets
  labels:
    app.kubernetes.io/name: sealed-secrets-controller
spec:
  podSelector:
    matchLabels:
      app.kubernetes.io/name: sealed-secrets-controller
  egress:
  # K8S API for secret decrypt/save
  - ports:
    - port: 443  # kubernetes.default.svc
      protocol: TCP
    to:
    - ipBlock:
        cidr: 172.20.0.1/32  # kubernetes.default.svc
    - ipBlock:
        cidr: 10.233.0.1/32  # Kubespray kubernetes.default.svc
  - ports:
    - port: 6443  # kubernetes.default.svc
      protocol: TCP
    to:
    - ipBlock:
        cidr: 192.168.2.0/26  # masters
  ingress:
  # Prometheus Scrape
  - from:
    - namespaceSelector:
        matchLabels:
          name: prometheus
      podSelector:
        matchLabels:
          app: prometheus
    ports:
    - port: 8080
      protocol: TCP
  policyTypes:
  - Ingress
  - Egress
